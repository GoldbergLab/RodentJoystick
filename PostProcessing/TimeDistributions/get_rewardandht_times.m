function [data, dates, statistics] = get_rewardandht_times(jslist, varargin )
%data = 
% get_rewardandht_times(jslist, [hist_int, TIME_RANGE, combineflag])
%returns histogram data for all valid trajectories for all days in jslist -
%  it gives time distributions of:
%   all hold times, rewarded trajectory hold times, reward rate by
%   interval, reward_or_stop times (now the same as hold time), and
%   joystick onset to reward onset time
%OUTPUTS:
%   data :: cell array with same length as jslist. Each cell represents a day and 
%       has the following format:
%       [time, ht_hist, rw_or_stop_hist, rew_hist, rewrate, js2rew_hist]
%       time - bins generated by 0:hist_int:TIME_RANGE;
%       ht_hist - hold time histogram using time as bins
%       rw_or_stop_hist - reward or stop histogram using time as bins
%       rew_hist - hold times of rewarded trajectories histogram using time as bins
%       rewrate - reward rate for each interval defined by time bins
%       js2rew_hist - joystick onset to reward histogram
%   labels :: struct containing legend
%   statistics :: cell array of structs containing descriptive statistics
%   for each day
%ARGUMENTS:
%   tstruct :: structure containing all the information about each
%       trajectory. NOT the same as jstruct - after running
%       stats = xy_getstats, tstruct = stats.traj_struct
%   OPTIONAL
%   hist_int :: size of the bins for data generation and histogram plotting
%       DEFAULT : 20
%   statflag :: flag that tells hold_time_distr whether to display
%       statistics. 'stats' displays stats, 'none' doesn't display
%       DEFAULT : 'none'
%   TIME_RANGE :: number that tells end time range
%       DEFAULT : 2000

%% ARGUMENT MANIPULATION AND PRELIMINARY MANIPULATION
default = {20, 2000, 0};
numvarargs = length(varargin);
if numvarargs > 3
    error('too many arguments (> 5), only 1 required and 3 optional.');
end
[default{1:numvarargs}] = varargin{:};
[hist_int, TIME_RANGE, combineflag] = default{:};


%% Actually get data now
if combineflag==0
%% GET LIST of individual data
    data = cell(length(jslist), 1);
    statistics = cell(length(jslist), 1);
    for i= 1:length(jslist)
        load(jslist(i).name);
        dates{i} = datestr(jstruct(2).real_time, 'mm/dd/yyyy');
        stats = xy_getstats(jstruct);
        [time, ht_hist, rw_or_stop_hist, rew_hist, rewrate_hist, js2rew_hist, tmpstats] = generate_data(stats, hist_int, TIME_RANGE);
        statistics{i} = tmpstats;
        data{i}=[time, ht_hist, rw_or_stop_hist, rew_hist, rewrate_hist, js2rew_hist];
    end
else
%% FIND COMBINED DATA    
    combined = [];
    for i= 1:length(jslist)
        load(jslist(i).name);
        combined = [combined, jstruct];
        dates{i} = datestr(jstruct(2).real_time, 'mm/dd/yyyy');
    end
    stats = xy_getstats(combined);
    [time, ht_hist, rw_or_stop_hist, rew_hist, rewrate_hist, js2rew_hist, tmpstats] = generate_data(stats, hist_int, TIME_RANGE);
    statistics{1} = tmpstats;
    data{1}=[time, ht_hist, rw_or_stop_hist, rew_hist, rewrate_hist, js2rew_hist];
    dates={[dates{1}, ' - ', dates{end}]};
end
end

function [time, ht_hist, rw_or_stop_hist, rew_hist, rewrate_hist, js2rew_hist, tmpstats] = generate_data(stats, hist_int, TIME_RANGE)
tstruct = stats.traj_struct;
time = 0:hist_int:TIME_RANGE;        
holdtimes = zeros(length(tstruct), 1);
rw_or_stop = zeros(length(tstruct), 1);
j =0; rewtimes = []; js2rew = [];
for k = 1:length(tstruct)
    holdtimes(k) = length(tstruct(k).magtraj); %Teja 
    rw_or_stop(k) = tstruct(k).rw_or_stop;
    if tstruct(k).rw == 1
        j = j+1;
        rewtimes(j) = length(tstruct(k).magtraj);
        js2rew(j) = tstruct(k).rw_onset;
    end
end
rewtimes = rewtimes';
js2rew = js2rew';
ht_hist = histc(holdtimes, time);
rw_or_stop_hist = histc(rw_or_stop, time);
rew_hist = histc(rewtimes, time);
js2rew_hist = histc(js2rew, time);
rewrate_hist = rew_hist./ht_hist;

ht_hist = ht_hist./sum(ht_hist);
rw_or_stop_hist = rw_or_stop_hist./sum(rw_or_stop_hist);
rew_hist = rew_hist./sum(rew_hist);
js2rew_hist = js2rew_hist./sum(js2rew_hist);


tmpstats.reward = prctile(rewtimes, [25 50 75]);
tmpstats.reward(4) = mean(rewtimes);
tmpstats.reward(5) = std(rewtimes);
tmpstats.ht = prctile(holdtimes, [25 50 75]);
tmpstats.ht(4) = mean(holdtimes);
tmpstats.ht(5) = std(holdtimes);
tmpstats.js2rew = prctile(js2rew, [25 50 75]);
tmpstats.js2rew(4) = mean(js2rew);
tmpstats.js2rew(5) = std(js2rew);
tmpstats.rw_or_stop = prctile(rw_or_stop, [25 50 75]);
tmpstats.rw_or_stop(4) = mean(rw_or_stop);
tmpstats.rw_or_stop(5) = std(rw_or_stop);
time = time';
end

